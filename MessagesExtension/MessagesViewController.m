//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by Gopal Rao Gurram on 3/9/17.
//  Copyright Â© 2017 Gopal Rao Gurram. All rights reserved.
//

#import "MessagesViewController.h"


@interface MessagesViewController ()

@property (nonatomic, strong) UALBaseMessageViewController *baseMessageViewController;

@property (nonatomic, strong) UALFlightStatusMainViewController *flightStatusMainController;

@property (nonatomic, strong) UALFlightStatusViewController *flightStatusViewController;

@property (nonatomic, strong) UALFlightSegment *flightSegmentForMessage;

@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

# pragma mark - MSMessage Delegate Methods

- (void)didSelectMessage:(MSMessage *)message
            conversation:(MSConversation *)conversation{
    
    NSLog(@"Did Select message");
}

#pragma mark - Conversation Handling

-(void)willBecomeActiveWithConversation:(MSConversation *)conversation {
    
    [self presentViewControllerForconversation: conversation withPresentationStyle: self.presentationStyle];
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    // Use this method to prepare for the change in presentation style.
}


-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
}


-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
    MSConversation *conversation = self.activeConversation? self.activeConversation: nil;
    [self presentViewControllerForconversation: conversation withPresentationStyle: self.presentationStyle];
}

# pragma mark - Present View Controllers

- (void) presentViewControllerForconversation:(MSConversation *)conversation withPresentationStyle: (MSMessagesAppPresentationStyle)presentationStyle{
    
    for (UIView *childVw in self.messagesSubView.subviews) {
        
        for (UIView *childSubVw in childVw.subviews) {
            [childSubVw removeFromSuperview];
        }
        [childVw removeFromSuperview];
    }
    
    // Determine the controller to present.
    UIViewController *controller = [UIViewController new];
    
    //controller = [self instantiateFlightStatusMainViewController];
    
    if (presentationStyle == MSMessagesAppPresentationStyleCompact) {
        controller = [self instantiateBaseMessageViewController];
    }
    else{
        if (conversation.selectedMessage.URL) {
            [self fetchComponentsFromUrl: conversation.selectedMessage.URL];
            controller = [self instantiateFlightStatusViewController];
        }
        else{
            controller = [self instantiateFlightStatusMainViewController];
        }
    }
    
    [self.messagesSubView addSubview: controller.view];
    [self addChildViewController: controller];
    [controller didMoveToParentViewController: self];
    
    controller.view.frame = CGRectMake(0, 0, self.messagesSubView.frame.size.width, self.messagesSubView.frame.size.height);
    [self.navigationController presentViewController: controller animated: YES completion: nil];
}

# pragma mark Instantiate View Controllers

- (UIViewController *)instantiateBaseMessageViewController{
    
    self.baseMessageViewController = (UALBaseMessageViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"UALBaseMessageViewController"];
    self.baseMessageViewController.delegate = self;
    return self.baseMessageViewController;
}

- (UIViewController *)instantiateFlightStatusMainViewController{
    
    self.flightStatusMainController = (UALFlightStatusMainViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"UALFlightStatusMainViewController"];
    self.flightStatusMainController.delegate = self;
    return self.flightStatusMainController;
}

- (UIViewController *)instantiateFlightStatusViewController{
    
    self.flightStatusViewController = (UALFlightStatusViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"UALFlightStatusViewController"];
    self.flightStatusViewController.delegate = self;
    self.flightStatusViewController.flightSegment = self.flightSegmentForMessage;
    self.flightStatusViewController.makeFlightStatusWebServiceCall = YES;
    return self.flightStatusViewController;
}

# pragma mark - Send Or Insert Message

- (void)sendOrInsertMessage: (UALFlightSegment *)flightSegment{
    
    MSSession *messageSession = [[MSSession alloc] init];
    
    MSMessage *message = [[MSMessage alloc] initWithSession: messageSession];
    
    MSMessageTemplateLayout *messageLayout = [[MSMessageTemplateLayout alloc]init];
    
    messageLayout.imageTitle = [NSString stringWithFormat:@"%@%@ / %@", @"UA", flightSegment.flightNumber, flightSegment.flightDepartDay];
    
    messageLayout.imageSubtitle = [NSString stringWithFormat:@"%@ to %@", flightSegment.flightDepartCityName, flightSegment.flightArrivalCityName];
    
    messageLayout.caption = flightSegment.flightDepartureCode;
    messageLayout.subcaption = flightSegment.flightScheduledDepartureTime;
    
    messageLayout.trailingCaption = flightSegment.flightArrivalCode;
    messageLayout.trailingSubcaption = [NSString stringWithFormat: @"%@%@", flightSegment.flightScheduledArrivalTime, flightSegment.flightScheduledArrivalDay];
    
    messageLayout.image = [UIImage imageNamed: @"test_plane2.png"];//, @"United_Plane.png", @
    message.URL = [self composeNavigationUrlForFlightStatusSegment: flightSegment];
    message.layout = messageLayout;
    
    NSString *userName = self.activeConversation.localParticipantIdentifier.UUIDString;
    
    message.summaryText = [NSString stringWithFormat: @"%@ has Shared Flight Status With You", userName];
    
    [self.activeConversation insertMessage:message completionHandler:^(NSError *error) {
        if (error) {
            NSLog(@"Error sending message %@", [error localizedDescription]);
        }
    }];
    
    [self dismiss];
    
//    NSUUID *messageSenderId = conversation.selectedMessage.senderParticipantIdentifier;
//    NSUUID *messageReceiverId = conversation.localParticipantIdentifier;
}

# pragma mark - Delegate Methods

- (void)presentFlightStatusViewController{
        
    [self requestPresentationStyle: MSMessagesAppPresentationStyleExpanded];
}

- (void)expandFlightStatusMainViewController: (UITextField *)textField{
    
    [self requestPresentationStyle: MSMessagesAppPresentationStyleExpanded];
}

# pragma mark Compose Message

- (void)composeMessageWithFlightStatusSegment: (UALFlightSegment *)flightSegment{
    [self sendOrInsertMessage: flightSegment];
}

- (void)composeMessageWithMOBFlightStatusSegment: (UALFlightSegment *)flightSegment{
    [self sendOrInsertMessage: flightSegment];
}



# pragma mark - All Helper Methods

- (NSURL *)composeNavigationUrlForFlightStatusSegment: (UALFlightSegment *)flightSegment{
    
    NSString *testurlString = @"https://mobile.united.com/FlightStatus/FlightDetails?carrierCode=UA&flightNumber=83&flightDate=03%2F14%2F2017%2000%3A00%3A00&origin=BOM&destination=EWR&GUID=9cb46164-a8f8-4148-b818-eef1ee36825a";//https://mobile.united.com/FlightDetails?carrierCode=UA&flightNumber=887&flightDate=03/14/2017&origin=YVR&destination=SFO&GUID=9cb46164-a8f8-4148-b818-eef1ee36825a
    
    NSString *gUID = @"9cb46164-a8f8-4148-b818-eef1ee36825a";
    
    NSURLComponents *components = [NSURLComponents componentsWithString:@"https://mobile.united.com/FlightStatus/FlightDetails"];
    NSURLQueryItem *carrierCode = [NSURLQueryItem queryItemWithName: @"carrierCode" value: @"UA"];
    NSURLQueryItem *flightNumber = [NSURLQueryItem queryItemWithName: @"flightNumber" value: flightSegment.flightNumber];
    NSURLQueryItem *flightDate = [NSURLQueryItem queryItemWithName: @"flightDate" value: flightSegment.flightDateForMakingUrl];
    NSURLQueryItem *origin = [NSURLQueryItem queryItemWithName: @"origin" value: flightSegment.flightDepartureCode];
    NSURLQueryItem *destination = [NSURLQueryItem queryItemWithName: @"destination" value: flightSegment.flightArrivalCode];
    NSURLQueryItem *GUID = [NSURLQueryItem queryItemWithName: @"GUID" value: gUID];
    
    [components setQueryItems: @[carrierCode, flightNumber, flightDate, origin, destination, GUID]];
    
    return components.URL;
}

- (void)fetchComponentsFromUrl: (NSURL *)url{
    
    self.flightSegmentForMessage = [UALFlightSegment new];
    NSURLComponents *components = [NSURLComponents componentsWithURL: url resolvingAgainstBaseURL: NO];
    NSString *flightNumber, *flightDate, *flightOrigin;
    for (NSURLQueryItem *item in components.queryItems) {
        if ([item.name isEqualToString:@"flightNumber"]) {
            flightNumber = item.value;
            self.flightSegmentForMessage.flightNumber = item.value;
        }
        else if([item.name isEqualToString:@"flightDate"]){
            flightDate = item.value;
            self.flightSegmentForMessage.flightDateForMakingUrl = item.value;
        }
        else if ([item.name isEqualToString:@"origin"]){
            flightOrigin = item.value;
            self.flightSegmentForMessage.flightDepartureCode = item.value;
        }
    }
    NSLog(@"flightNumber: %@\nflightDate: %@\nflightOrigin :%@", flightNumber, flightDate, flightOrigin);
}

@end
